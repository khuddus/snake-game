{"version":3,"sources":["Cell.js","App.js","serviceWorker.js","index.js"],"names":["Cell","react_default","a","createElement","className","normal","snake","fruit","this","props","type","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setDirection","bind","assertThisInitialized","initiate","startGame","restartGame","newFruit","parseInt","Math","random","state","timerCount","width","height","cells","direction","score","timegap","moveSnakeInterval","isRunning","highestScore","i","j","push","newCells","slice","newSnake","nextHead","fruitValue","length","alert","clearInterval","newScore","newHighestScore","speedUpGame","x","y","setState","previousState","newCells2","speedDifference","_this2","newTimeGap","newMoveSnakeInterval","setInterval","moveSnake","_this3","_this4","keyCode","_ref","changeDirection","forEach","dir","indexOf","boardContent","count","currentCells","singleCell","fill","currentSnake","row","key","src_Cell_0","value","xvalue","yvalue","onKeyDown","tabIndex","disabled","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.edd8d93a.chunk.js","sourcesContent":["import React, { Component } from 'react'; \r\nimport './Cell.css';\r\n \r\nclass Cell extends Component {\r\n  render( ) {\r\n    var cellType= {\r\n      normal:\"cell \",\r\n      snake:\" cell cell-snake\",\r\n      fruit:\" cell cell-fruit\"\r\n    };\r\n    \r\n    return (\r\n\r\n      <div className={cellType[this.props.type]}   >\r\n\r\n     {/* {this.props.xvalue}|{this.props.yvalue} */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cell;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Cell from './Cell';\r\n\r\nclass App extends Component {\r\n  initiate() {\r\n    const defaultheight = 30;\r\n    const defaultwidth = 30;\r\n\r\n    const x = parseInt(Math.random() * defaultheight);\r\n    const y = parseInt(Math.random() * defaultwidth);\r\n    var newFruit = [x, y];\r\n\r\n    this.state = {\r\n      timerCount: 0,\r\n      width: defaultwidth,\r\n      height: defaultheight,\r\n      snake: [],\r\n      cells: [],\r\n      fruit: newFruit,\r\n      direction: 39,\r\n      score: 0,\r\n      timegap: 300,\r\n      moveSnakeInterval: null,\r\n      isRunning: false,\r\n      highestScore:0\r\n\r\n    };\r\n    for (var i = 0; i < defaultheight; i++) {\r\n      this.state.cells[i] = [];\r\n      for (var j = 0; j < defaultwidth; j++)\r\n        this.state.cells[i][j] = \"normal\";\r\n    }\r\n\r\n    this.state.snake.push([5, 5])\r\n\r\n    // console.log(this.state.cells);\r\n    var newCells = this.state.cells.slice();\r\n    newCells[this.state.fruit[0]][this.state.fruit[1]] = \"fruit\";\r\n    this.state.cells = newCells;\r\n\r\n    //  this.startGame();\r\n  }\r\n  constructor(props) {\r\n    super(props);\r\n\r\n\r\n    this.setDirection = this.setDirection.bind(this);\r\n    this.initiate = this.initiate.bind(this);\r\n    this.startGame = this.startGame.bind(this);\r\n    this.restartGame = this.restartGame.bind(this);\r\n    this.initiate();\r\n  }\r\n  moveSnake() {\r\n    var newSnake = [];\r\n    var nextHead = this.state.snake[0].slice();\r\n    var fruitValue = 0;\r\n\r\n    if (this.state.direction == 39)//right\r\n      nextHead[1] = (this.state.width + nextHead[1] + 1) % this.state.width;\r\n    else if (this.state.direction == 37)//left\r\n      nextHead[1] = (this.state.width + nextHead[1] - 1) % this.state.width;\r\n    else if (this.state.direction == 40)//down\r\n      nextHead[0] = (this.state.height + nextHead[0] + 1) % this.state.height;\r\n    else if (this.state.direction == 38)//up\r\n      nextHead[0] = (this.state.height + nextHead[0] - 1) % this.state.height;\r\n    //if snake eat itself\r\n    for (var i = 0; i < this.state.snake.length; i++) {\r\n      if (nextHead[0] == this.state.snake[i][0] && nextHead[1] == this.state.snake[i][1]) {\r\n        alert(\"Game over\");\r\n        if (this.state.moveSnakeInterval)\r\n          clearInterval(this.state.moveSnakeInterval);\r\n      }\r\n    }\r\n    var newScore = this.state.score;\r\n    var newHighestScore = this.state.highestScore;\r\n    //if snake faces fruit\r\n    if (nextHead[0] == this.state.fruit[0] && nextHead[1] == this.state.fruit[1]) {\r\n      fruitValue++;\r\n      newScore++;\r\n      if(newScore%5)this.speedUpGame(20);\r\n      if(newScore>newHighestScore)\r\n      newHighestScore=newScore;\r\n      \r\n    }\r\n    newSnake.push(nextHead);\r\n    for (var i = 0; i < this.state.snake.length - 1 + fruitValue; i++) {\r\n      newSnake.push(this.state.snake[i]);\r\n    }\r\n    var newFruit = this.state.fruit.slice();\r\n    if (fruitValue == 1) {\r\n      const x = parseInt(Math.random() * this.state.height);\r\n      const y = parseInt(Math.random() * this.state.width);\r\n      newFruit = [x, y];\r\n    }\r\n    this.setState(previousState => (\r\n      {\r\n        timerCount: previousState.timerCount + 1,\r\n        snake: newSnake,\r\n        fruit: newFruit,\r\n        score: newScore,\r\n        highestScore: newHighestScore\r\n      }\r\n    ))\r\n    // console.log(this.state.snake);\r\n  };\r\n  restartGame() {\r\n    \r\n\r\n    const x = parseInt(Math.random() * this.state.height);\r\n    const y = parseInt(Math.random() * this.state.width);\r\n    var newFruit = [x, y];\r\n    var newCells=[];\r\n    for (var i = 0; i < this.state.height; i++) {\r\n      newCells[i] = [];\r\n      for (var j = 0; j < this.state.width; j++)\r\n        newCells[i][j] = \"normal\";\r\n    }\r\nvar newSnake=[];\r\n    newSnake.push([5, 5])\r\n\r\n    // console.log(this.state.cells);\r\n    var newCells2 = this.state.cells.slice();\r\n    newCells2[newFruit[0]][newFruit[1]] = \"fruit\";\r\n    newCells = newCells2;\r\n    this.setState ( {\r\n      timerCount: 0,\r\n        snake: newSnake,\r\n      cells: newCells,\r\n      fruit: newFruit,\r\n      direction: 39,\r\n      score: 0,\r\n      timegap: 300,\r\n      moveSnakeInterval: null,\r\n      isRunning: false\r\n\r\n    });\r\n \r\n\r\nthis.startGame();\r\n  }\r\n\r\n  speedUpGame(speedDifference) {\r\n    if(this.state.timegap-speedDifference > 30){ \r\n      var newTimeGap=this.state.timegap-speedDifference;\r\n    if (this.state.moveSnakeInterval)\r\n      clearInterval(this.state.moveSnakeInterval);\r\n    var newMoveSnakeInterval = setInterval(() => (\r\n\r\n      this.moveSnake()\r\n    ), newTimeGap);\r\n    this.setState(previousState => (\r\n      {\r\n        timegap:newTimeGap,\r\n        isRunning: true,\r\n        moveSnakeInterval: newMoveSnakeInterval\r\n      }\r\n    ));\r\n    }\r\n  }\r\n  startGame() {\r\n    if (this.state.moveSnakeInterval)\r\n      clearInterval(this.state.moveSnakeInterval);\r\n    var newMoveSnakeInterval = setInterval(() => (\r\n\r\n      this.moveSnake()\r\n    ), this.state.timegap);\r\n    this.setState(previousState => (\r\n      {\r\n        isRunning: true,\r\n        moveSnakeInterval: newMoveSnakeInterval\r\n      }\r\n    ));\r\n  }\r\n  setDirection({ keyCode }) {\r\n    // if it's the same direction or simply reversing, ignore\r\n    let changeDirection = true;\r\n    [[38, 40], [37, 39]].forEach(dir => {\r\n      if (dir.indexOf(this.state.direction) > -1 && dir.indexOf(keyCode) > -1) {\r\n        changeDirection = false;\r\n      }\r\n    });\r\n\r\n    if (changeDirection) this.setState({ direction: keyCode });\r\n  }\r\n  render() {\r\n    //display board\r\n    var boardContent = [];\r\n    var count = 0;\r\n    var currentCells = this.state.cells.slice();\r\n    var fruit = this.state.fruit.slice();\r\n    currentCells.forEach(singleCell => {\r\n      singleCell.fill(\"normal\");\r\n    });\r\n    this.state.snake.forEach(currentSnake => {\r\n      currentCells[currentSnake[0]][currentSnake[1]] = \"snake\";\r\n    });\r\n    currentCells[fruit[0]][fruit[1]] = \"fruit\";\r\n    for (var i = 0; i < this.state.height; i++) {\r\n      var row = [];\r\n      for (var j = 0; j < this.state.width; j++) {\r\n        row.push(<td key={count}  ><Cell value={count++} xvalue={i} yvalue={j} type={currentCells[i][j]} /></td>);\r\n      }\r\n      boardContent.push(<tr key={i}>{row}</tr>);\r\n    }\r\n\r\n\r\n\r\n    return (\r\n      <div className=\"App\" onKeyDown={this.setDirection} tabIndex=\"0\"  >\r\n        <p>Score : {this.state.score}</p><p>Highest Score : {this.state.highestScore}</p>\r\n        <table className=\"board\" >\r\n          <tbody>\r\n            {boardContent}\r\n          </tbody>\r\n        </table>\r\n        <button disabled={!this.state.isRunning} onClick={this.restartGame}>Restart</button>\r\n        <button disabled={this.state.isRunning} onClick={this.startGame}>Start</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';   \r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}